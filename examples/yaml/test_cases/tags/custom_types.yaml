# YAML Tags and Custom Types Test File
# This file demonstrates YAML tag usage and custom type definitions
---
# =============================================
# Standard YAML Tags (Core Schema)
# =============================================

# Standard built-in tags
core_schema_types:
  # String tag (default for quoted or most unquoted content)
  string_explicit: !!str "This is explicitly a string"
  string_implicit: "This is implicitly a string"

  # Integer types
  integer_explicit: !!int 42
  integer_implicit: 42

  # Floating point types
  float_explicit: !!float 3.14159
  float_implicit: 3.14159

  # Boolean types
  boolean_explicit: !!bool true
  boolean_implicit: true

  # Null values
  null_explicit: !!null null
  null_implicit: null
  null_empty:  # Empty is implicitly null
  # Binary data (base64 encoded)
  binary: !!binary |
    R0lGODlhDAAMAIQAAP//9/X17unp5WZmZgAAAOfn515eXvPz7Y6OjuDg4J+fn5
    OTk6enp56enmlpaWNjY6Ojo4SEhP/++f/++f/++f/++f/++f/++f/++f/++f/+
    +f/++f/++f/++f/++f/++SH+Dk1hZGUgd2l0aCBHSU1QACwAAAAADAAMAAAFLC
    AgjoEwnuNAFOhpEMTRiggcz4BNJHrv/zCFcLiwMWYNG84BwwEeECcgggoBADs=

  # Sets and ordered maps (!!set and !!omap are in YAML 1.1 but not 1.2)
  # They're included here for completeness
  set_items: !!set
    ? item1
    ? item2
    ? item3

  ordered_map: !!omap
    - key1: value1
    - key2: value2
    - key3: value3

# =============================================
# Type Conversions with Tags
# =============================================

# Forcing specific types
type_conversions:
  # Convert string to number
  string_to_int: !!int "42"

  # Convert number to string
  int_to_string: !!str 42

  # Convert to boolean (non-empty strings are true)
  string_to_bool: !!bool "yes"

  # Convert to timestamp
  string_to_timestamp: !!timestamp "2025-04-15T15:16:20Z"

# =============================================
# Custom Tag Definitions
# =============================================

# Local tags (prefixed with !) are document-specific
local_tags:
  # Define a point with x,y coordinates
  point: !point {x: 73, y: 129}

  # Define a complex number
  complex: !complex {real: 5.0, imag: 3.0}

  # Define a measurement with unit
  length: !measure {value: 10, unit: cm}

  # Define a person with custom tag
  person: !person
    name: John Doe
    age: 30
    address:
      street: 123 Main St
      city: Anytown

# =============================================
# Tag Shorthand Notation
# =============================================

# Tag shorthand (using TAG directives)
%TAG !t! tag:example.com,2025:
---
# Global tags (prefixed with tag URI)
global_tags:
  # Full URI notation
  user_full: !tag:example.com,2025:user {name: Alice, id: 123}

  # Using the !t! shorthand defined above
  user_short: !t!user {name: Bob, id: 456}

  # Multiple tag shorthand can be defined
  config: !t!config
    environment: production
    debug: false
    features:
      - one
      - two

# =============================================
# Complex Data Structures with Tags
# =============================================

# Complex nested structures with tags
%TAG !db! tag:database.example.com,2025:
---
database:
  # Table definition with columns
  table: !db!table
    name: users
    columns:
      - column: !db!column
          name: id
          type: !db!type/int
          primary_key: true
      - column: !db!column
          name: username
          type: !db!type/varchar
          length: 64
      - column: !db!column
          name: email
          type: !db!type/varchar
          length: 128
          constraints:
            - !db!constraint/unique
            - !db!constraint/not-null

    # Query definition
    query: !db!query
      select: [id, username]
      from: users
      where: !db!condition
        field: email
        operator: =
        value: john@example.com

# =============================================
# Tag Inheritance and Composition
# =============================================
# =============================================

# Type hierarchy with inheritance
type_hierarchy:
  base_types:
    # Base class definition
    base_def: !type/base &base
              id: 0
              created_at: 2025-04-15T00:00:00Z

    # Extended types using anchors and aliases
    # Inherits from base
    derived1: !type/derived1
      <<: *base
      name: "Derived Type 1"

    # Multi-level inheritance
    derived2: !type/derived2 &derived2
              <<: *base
              description: "Second level type"

    # Third level
    derived3: !type/derived3
      <<: *derived2
      extra_field: "Third level type"

# =============================================
# Validation Cases for Custom Types
# =============================================

validation_examples:
  # Valid types
  valid_types:
    valid_point: !point {x: 10, y: 20}
    valid_date: !!timestamp 2025-01-01

  # Invalid types (for testing validators)
  invalid_types:
    invalid_point1: !point {x: "ten", y: 20}  # x should be numeric
    invalid_point2: !point {x: 10, z: 20}     # missing y, has z

    # Missing required fields
    invalid_person: !person
      name: Jane Doe
      # missing age

    # Type mismatch
    invalid_type: !complex
      real: "not a number"
      imag: 5.0

# =============================================
# Custom Tag Processing Examples
# =============================================

tag_processing:
  # Examples showing how custom tags might be processed
  basic_examples:
    # Regular expression pattern
    regex: !regex '^[a-z]+$'

    # URL with validation
    url: !url https://example.com/api

    # Date with specific format
    date: !date/iso8601 2025-04-15

  advanced_examples:
    # File reference
    file: !include config.yaml

    # Mathematical expression
    formula: !expr 'sin(x) + cos(y)'

    # Custom binary format
    custom_binary: !hex DEADBEEF

...
